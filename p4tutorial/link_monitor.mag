#include "stdparser"

header probe_t {
    bit<8> hop_cnt;
}

header probe_data_t {
    bit<1>    bos;
    bit<7>    swid;
    bit<8>    port;
    bit<32>   byte_cnt;
    time_t    last_time;
    time_t    cur_time;
}

header probe_fwd_t {
    bit<8>   egress_spec;
}

struct headers {
    ethernet_t              ethernet;
    ipv4_t                  ipv4;
    probe_t                 probe;
    probe_data_t[MAX_HOPS]  probe_data;
    probe_fwd_t[MAX_HOPS]   probe_fwd;
}

parser MyParser(packet_in packet,
                out headers hdr,
                inout metadata meta,
                inout standard_metadata_t standard_metadata) {

    state start {
        transition parse_ethernet;
    }

    state parse_ethernet {
        packet.extract(hdr.ethernet);
        transition select(hdr.ethernet.etherType) {
            TYPE_IPV4: parse_ipv4;
            TYPE_PROBE: parse_probe;
            default: accept;
        }
    }

    state parse_ipv4 {
        packet.extract(hdr.ipv4);
        transition accept;
    }

    state parse_probe {
        packet.extract(hdr.probe);
        meta.parser_metadata.remaining = hdr.probe.hop_cnt + 1;
        transition select(hdr.probe.hop_cnt) {
            0: parse_probe_fwd;
            default: parse_probe_data;
        }
    }

    state parse_probe_data {
        packet.extract(hdr.probe_data.next);
        transition select(hdr.probe_data.last.bos) {
            1: parse_probe_fwd;
            default: parse_probe_data;
        }
    }

    state parse_probe_fwd {
        packet.extract(hdr.probe_fwd.next);
        meta.parser_metadata.remaining = meta.parser_metadata.remaining - 1;
        // extract the forwarding data
        meta.egress_spec = hdr.probe_fwd.last.egress_spec;
        transition select(meta.parser_metadata.remaining) {
            0: accept;
            default: parse_probe_fwd;
        }
    }
}

processing_rule decttl(inout pkt: Packet) {
    pkt.hdr.ipv4.ttl--
}

processing_rule monitor(inout pkt: Packet, in standard_mentadata, in swid) {
    val hdr = pkt.hdr
    // count the number of bytes seen since the last probe
    register<bit<32>>(MAX_PORTS) byte_cnt_reg;
    // remember the time of the last probe
    register<time_t>(MAX_PORTS) last_time_reg;
    hdr.probe.hop_cnt++
    bit<32> byte_cnt;
    bit<32> new_byte_cnt;
    time_t last_time;
    time_t cur_time = standard_metadata.egress_global_timestamp;
    // increment byte cnt for this packet's port
    byte_cnt_reg.read(byte_cnt, (bit<32>)standard_metadata.egress_port);
    byte_cnt = byte_cnt + standard_metadata.packet_length;
    // reset the byte count when a probe packet passes through
    new_byte_cnt = (hdr.probe.isValid()) ? 0 : byte_cnt;
    byte_cnt_reg.write((bit<32>)standard_metadata.egress_port, new_byte_cnt);

    if (hdr.probe.isValid()) {
        // fill out probe fields
        hdr.probe_data.push_front(1);
        hdr.probe_data[0].setValid();
        if (hdr.probe.hop_cnt == 1) {
            hdr.probe_data[0].bos = 1;
        }
        else {
            hdr.probe_data[0].bos = 0;
        }
        // set switch ID field
        hdr.probe_data[0].swid = swid
        hdr.probe_data[0].port = (bit<8>)standard_metadata.egress_port;
        hdr.probe_data[0].byte_cnt = byte_cnt;
        // read / update the last_time_reg
        last_time_reg.read(last_time, (bit<32>)standard_metadata.egress_port);
        last_time_reg.write((bit<32>)standard_metadata.egress_port, cur_time);
        hdr.probe_data[0].last_time = last_time;
        hdr.probe_data[0].cur_time = cur_time;
    }
}

@policy(parser=Parser, label="default")
path_control pc(in pkt: Packet, out path: Path, out rule: ProcRule) {
    pkt.hdr.eth.dst = pkt.hdr.eth.src
    path = lmPath(pkt.ingestion)
    rule = '(decttl & monitor)*'
}