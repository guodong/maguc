#include "stdparser"
#include "dpfunction"

struct headers {
    ethernet_t   eth;
    ipv4_t     ipv4;
    tcp_t      tcp;
}

parser MyParser(packet_in packet,
                out headers hdr,
                inout metadata meta,
                inout standard_metadata_t standard_metadata) {

    state start {
        transition parse_ethernet;
    }
    state parse_ethernet {
        packet.extract(hdr.ethernet);
        transition select(hdr.ethernet.etherType) {
            0x800: parse_ipv4;
            default: accept;
        }
    }
    state parse_ipv4 {
        packet.extract(hdr.ipv4);
        transition select(hdr.ipv4.protocol) {
            6: parse_tcp;
            default: accept;
        }
    }
    state parse_tcp {
        packet.extract(hdr.tcp);
        transition accept;
    }
}

hostTable: Map[Ipv4, SwPort]

ipToMac: Map[Ipv4, Mac]

processing_rule decttl(inout pkt: Packet) {
    pkt.hdr.ipv4.ttl--
}

processing_rule ecmp(inout pkt: Packet, inout nhops: Set[SwPort]) {
    val idx = hash5tuple(pkt) % nhops.length
    nhops = Set(nhops(idx))
}

@policy(parser=Parser, label="default")
path_control pc(in pkt: Packet, out path: Path, out rule: ProcRule) {
    pkt.hdr.eth.dst = ipToMac(pkt.hdr.ipv4.dst)
    path = ecmpPath(pkt.ingestion, hostTable.lpm(pkt.hdr.ipv4.dst))
    rule = '(decttl & ecmp)*'
}